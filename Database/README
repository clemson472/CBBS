Directory:
	Description of contents of that directory

.:
	includes.php -- A file where all things which may need to be included
			should be placed in a require statement.
			This makes it easy for other Teams to access all of
			the functions written by the Database team.
			It also helps the Database team in debugging their
			own code, since it avoids circular and redundant requires.
			Redundant requires are a problem since "require" suffers
			from a fatal error because of them, causing the entire
			script to halt.

	TODO -- A list of things to do. Make sure to read the top comment
		to avoid confusing everyone.

	*.sql -- backups of the database

ExcelFunctions:
	This directory contains the file excelFunctions.php. This file defines
	many functions which are useful in creating .csv format files from
	database queries.

	The most important function is highlighted here:
		toExcel($database, $query, $label) --
			returns a string formatted to be written to a .csv file
			The string is formatted as follows:
			"$label"\n
			"queryResultColumn1","queryResultColumn2",....\n
			"row1ColumnData1","row1ColumnData2",....\n
			"row2ColumnData1","row2ColumnData2",....\n
			....
			
			The string will have the following format when written
			to a .csv file and opened appropriately in Excel:
			(|text| indicates a cell in Excel)
				|label             | |                  |
				|queryResultColumn1| |queryResultColumn2| ....
				|row1ColumnData1   | |row1ColumnData2   | ....
				|row2ColumnData1   | |row2ColumnData2   | ....
				...

ExportDatabase:
	This directory contains the file exportDatabase.php. This script
	can be run (given the necessary command line arguments) to
	export all of the data in a set of tables into an Excel
	readable file.

	Essentially this script just calls
          exportTablesToExcel($database, $tableNames,$filename)
	with the data given on the command line.

ImportDatabase:
	importOldDatabase.php:
	This directory contains the file importOldDatabase.php. Once given
	the login information for the database, the path to convert.py
	(also located in ImportDatabase), and the path to the old
	database saved as a .csv file, this script will convert the old
	database into files corresponding to tables in the new database.
	The files are then immediately parsed and the data is added to
	the new database. 

 	IMPORTANT:
  		importOldDatabase.php requires that the tables for which the data
  		is going to be added to already exists in the database.
  		Obviously there will not be any data in the tables, but
  		the tables with the proper column names must exist.
 
  		The easiest way to accomplish this is to load one of the
 		saved .sql files of the database. You should probably
  		load the most recent one. 

	importDatabase.php:
	Very similar to importOldDatabase.php except it does not require a
	python script and works on files of the format created by toExcel()
	found in ExcelFunctions/excelFunctions.php.

	importDatabaseFunctions.php:
	This is the php file which has the implementations for importing the old
	and the new databases from .csv files.

Matching:
	matchingFunctions.php:
		Contains functions for adding and removing matches between mentors
		and mentees.
	
Mentor:
	Mentor.php
		Contains a class "Mentor" which contins functions for altering the
		Mentor table and for getting data out of the Mentor table.
Mentee:
	Mentee.php
		Contains a class "Mentee" which contins functions for altering the
		Mentee table and for getting data out of the Mentee table.
Query:
	queryFunctions.php:
		Contains functions for generating common queries to the database.
		INSERT,DELETE,UPDATE queries are currently supported to a
		reasonable degree. Many more functions or more complex functions
		may be needed in the future.

Conventions:
	(1) When naming columns in the database :
		Use camel case and include capitalization of the first letter
			e.g. (FirstName, LastName, IsMentor,...)
		Non-boolean values do NOT begin with the word 'Is'
		Boolean values begin with the word 'Is' 
			e.g. (IsMentor, IsMentee, IsInMatchResult)
		NOTE: Failure to follow the boolean naming convention will
		      result in non-user friendly output from the functions
		      in excelFunction.php. For instance, the client would
		      like to see "YES" and "NO" in the excel spreadsheet
		      instead of "TRUE" and "FALSE" or "1" and "0" in the
		      spreadsheet. Following this convention allows the php
		      code to correctly modify the data in the database to
		      be represented as the client desires.
	(2) Please do not commit or push code which has the login information
	    for the database. Remember, this is not a private repository,
	    anyone can pull this code.

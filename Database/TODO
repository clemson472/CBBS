###############################################################
	Some tasks depend on other tasks being done first.
	This is denoted by the
		x.y notation.
	Lower valued y's must be done before higher valued y's
	of the same x.
	
	Tasks with different x values may be done at any time
	independent of eachother.

	Tasks with equivalent x and y values may be done at 
	any time independent of eachother so long as the
	tasks with lower y values have been completed first.

	A task which has been complted should be moved to the
	bottom and the x.y value should be replaced by DONE.

	If you are working on a task, make sure to put your name
	next to the x.y value as in:
		Name x.y
	That way, others will know to work on something else
	or to consult you before working on the task that
	you have already been working on.
###############################################################
(1.0)
	We need to change convert.py to print out the names
	of the columns into the files containing the 
	table's data (i.e. Mentor.csv and Mentee.csv).

	Right now *.csv files have the format:
		row1
		row2
		row3

	All that needs to be changed is to print the column
	names at the top:
		column1 column2 column3
		row1
		row2
		row3

	**The rows contain data for each column**

	Then importDatabase() needs to add the data only to
	those columns.

	Which means 
	INSERT INTO table_name
	VALUES(value1, value2,..)
	
	becomes

	 INSERT INTO table_name (column1, column2, ...)
	 VALUES (value1, value2, ...)

	This will allow us to add columns to any part of the
	existing Mentor and Mentee tables without having
	to change the convert.py or importDatabase() scripts.
(1.1)
	rename the importDatabase() function to importOldDatabase() 
	rename importDatabase.php to importOldDatabase.php 
	 -- make sure to change the call to importDatabase() within
	    the script to importOldDatabase.php
		
	Then create this function in importDatabaseFunctions.php:
	importDatabase($database, $file) 
	-- adds the data in the file $file
	to the database. The file is assumed to be
	of the format created by exportDatabase().
	This is the format:
	"TableName"
	"Column1", "Column2",...
	"Data1","Data2",...
	"Data1","Data2",...

	"TableName2"
	...

	***
	The newline between tables is optional and should not
	be used as a flag when parsing the file.
	Just check if the line from the file (after being trimmed
	of whitespace) is in fact the name of a table in the 
	database. If it is an existing table, then assume the
	next line contains the columns of the table and
	the following lines are the data of the table until another
	row is encountered which is a valid table name.

	If you parse a line which is only whitespace (the "" after
	trimming), then simply ignore it and move on to the next
	line.
	***

	Do not assume that all the columns will be present. Just add
	the data to the columns that are present in the spreadsheet.

	Essentially you are trying to do the following query
	 INSERT INTO table_name (column1, column2, ...)
	 VALUES (value1, value2, ...)
	for each row of a table

(1.1)   Add column : "ExtendedDegree" to Mentee after "Major"
---------------STUFF THAT'S DONE---------------------------
(DONE) Have convert.py output a file named TableNames
    which contains the name of a table with a corresponding
    .csv file for each file generated by the convert.py
    script. 

    The importDatabase.php script should then read in the
    names of the tables into the $tableNames array by
    parsing the TableNames file.
    
    This way, should convert.py change to create
    more (or less) or differently named tables, the 
    importDatabase.php script will not have to be edited
    in any way.

(DONE) Currently the importDatabase.php script must be ran from
    the command line. This is not very useful for programmers
    who simply want to import and invoke a function from their 
    own script. Most of importDatabase.php (the part that does
    not parse the command line) can be abstracted to a function
    accepting the interpreted command line arguments. The new
    file can be called importDatabaseFunctions.php. Then, the
    importDatabase.php script will simply call this function
    with the parsed command line.
